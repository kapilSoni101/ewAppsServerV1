using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace ewApps.Core.DeeplinkServices {
    /// <summary>
    /// This deeplink serivce is provide service to generate deeplink using third party branch API.
    /// </summary>
    /// <seealso cref="ewApps.Core.DeeplinkServices.IDeeplinkService" />
    public class DeeplinkService:IDeeplinkService {

        // protected string _deeplinkApiKey = "";
        protected string _deeplinkApiUrl = "";

        // TODO : changed constructor parameters.
        //public DeeplinkService(string deeplinkApiKey, string deeplinkApiUrl) {
        //  _deeplinkApiUrl = deeplinkApiUrl;
        //  _deeplinkApiKey = deeplinkApiKey;
        //}

        /// <summary>
        /// Initializes a new instance of the <see cref="DeeplinkService"/> class.
        /// </summary>
        /// <param name="deeplinkApiUrl">The deeplink API URL.</param>
        public DeeplinkService(string deeplinkApiUrl) {
            _deeplinkApiUrl = deeplinkApiUrl;
        }

        /// <summary>
        /// Generates deeplinks using Branch.io service protocol. <see cref="BranchAPI" />.
        /// It setups the return data from Branch.io like URL and jSON data as DeeplinkPayload.
        /// Note that input and output Payloads are distinct, not the same.
        /// </summary>
        /// <param name="payload">The deeplink payload information to generate deeplink.</param>
        /// <returns>Returns generated deeplink.</returns>
        public async Task<DeeplinkResultSet> GenerateDeeplinkAsync(DeeplinkPayload payload, CancellationToken token = default(CancellationToken)) {
            return GetDeeplinkList(payload);//as single operation generates multiple links.
        }

        /// <summary>
        /// Generates all the deeplink data and Branch.io link creation.
        /// </summary>
        /// <param name="payload">Deeplink payload information.</param>
        /// <returns>Generated deeplink information.</returns>
        //ToDo: Change this method access modifier from private to public.
        public DeeplinkResultSet GetDeeplinkList(DeeplinkPayload payload) {

            DeeplinkResultSet deeplinkResultSet = new DeeplinkResultSet();

            deeplinkResultSet.DeepLinkResultSetLists = new List<DeepLinkResultSetList>();

            // Ensure that input has deeplink information.
            if(payload.DeeplinkInfo != null) {

                foreach(string linkKey in payload.DeeplinkInfo.Keys) {

                    Dictionary<string, string> deeplinkParameters = payload.DeeplinkInfo[linkKey];

                    // Set common fields from payload.
                    SetCommonLinkParametersFromPayload(linkKey, payload);

                    // Set dynamic value from other deeplinks 
                    // Some links need data generated by previous link 
                    // It follows the structure to add such data by field Name and Deeplink name.
                    SetDependentLinkParameter(linkKey, payload, deeplinkResultSet);

                    // Setup the link data
                    Deeplink dlink = new Deeplink();
                    dlink.SetLinkParameters(payload.DeeplinkInfo[linkKey]);

                    // Setup Branch.io data
                    // TODO:
                    DeeplinkResult deeplinkResult = AddBranchURL(dlink, deeplinkParameters["branchkey"]);

                    // Add the result to the output dictionary
                    deeplinkResultSet.DeeplinkResults.Add(linkKey, deeplinkResult);
                }

            }
            // When we have multiple deeplinks pointing to diffrenct locations.
            else if(payload.DeeplinkInfoList != null && payload.DeeplinkInfoList.Count > 0) {

                // Create deep link for each item in the list.
                foreach(DeeplinkInfo item in payload.DeeplinkInfoList) {

                    Dictionary<string, Dictionary<string, string>> deepLinkInfoDectionary = item.DeeplinkInfoList as Dictionary<string, Dictionary<string, string>>;

                    string linkKey = string.Empty;
                    //foreach(string key in deepLinkInfoDectionary.Keys) {
                    //    linkKey = key;
                    //}
                    foreach(string key in deepLinkInfoDectionary.Keys) {
                        linkKey = key;

                        // Get currenct deeplink info details.
                        Dictionary<string, string> deep = deepLinkInfoDectionary[linkKey];
                        payload.DeeplinkInfo = deepLinkInfoDectionary;

                        //set common fields from payload
                        SetCommonLinkParametersFromPayload(linkKey, payload);

                        // Set dynamic value from other deeplinks 
                        // Some links need data generated by previous link 
                        // It follows the structure to add such data by field Name and Deeplink name.
                        SetDependentLinkParameter(linkKey, payload, deeplinkResultSet);

                        // Setup the link data
                        Deeplink dlink = new Deeplink();
                        dlink.SetLinkParameters(payload.DeeplinkInfo[linkKey]);

                        // Setup Branch.io data
                        // TODO:
                        DeeplinkResult deeplinkResult = AddBranchURL(dlink, deep["branchkey"]);

                        // Add the result to the output dictionary
                        //TODO:
                        DeepLinkResultSetList model = new DeepLinkResultSetList();
                        model.DeeplingResultKey = item.DeeplinkKey;
                        model.DeeplinkResults.Add(linkKey, deeplinkResult);
                        deeplinkResultSet.DeepLinkResultSetLists.Add(model);
                    }
                }
            }
            return deeplinkResultSet;
        }


        //  TODO : added deeplinkparameter.
        /// <summary>
        /// Generates Branch.io data for the deeplink 
        /// </summary>
        /// <param name="link"></param>
        /// <param name="deeplinkJson"></param>
        /// <param name="deeplinkUrl"></param>
        private DeeplinkResult AddBranchURL(Deeplink link, string _deeplinkApiKey) {
            string deeplinkUrl = "";
            string deeplinkJson = "";
            bool hasLinkError = false;
            BranchAPIInterface branchInterface = new BranchAPIInterface(link, _deeplinkApiKey, _deeplinkApiUrl);

            try {
                //Branch.io interface call to generate deeplink
                deeplinkUrl = branchInterface.GenerateShortURL();
            }
            catch(Exception exBranch) {
                // LogBranchError(exBranch, eventNumber);
                //deeplinkUrl = ConfigHelper.GetInProgressPageUrl();
                hasLinkError = true;
            }
            deeplinkJson = branchInterface.GetDeeplinkObjectJSON();
            DeeplinkResult output = new DeeplinkResult();
            output.DeeplinkURL = deeplinkUrl;
            output.DeeplinkJson = deeplinkJson;
            output.HasLinkError = hasLinkError;
            return output;
        }

        /// <summary>
        /// Sets common information from deeplink payload to deeplink payload information.
        /// </summary>
        /// <param name="deeplinkKey">Key to get data from deeplink info object from deeplink payload.</param>
        /// <param name="payload">DeeplinkPayload to read/update information.</param>
        private void SetCommonLinkParametersFromPayload(string deeplinkKey, DeeplinkPayload payload) {
            if(payload.DeeplinkInfo.ContainsKey(deeplinkKey)) {

                if(payload.DeeplinkInfo[deeplinkKey].ContainsKey("tenantid")) {
                    payload.DeeplinkInfo[deeplinkKey]["tenantid"] = payload.TenantId.ToString();
                }
                else {
                    payload.DeeplinkInfo[deeplinkKey].Add("TenantId", payload.TenantId.ToString());
                }

                payload.DeeplinkInfo[deeplinkKey].Add("notificationid", payload.NotificationId.ToString());

                payload.DeeplinkInfo[deeplinkKey].Add("linkednotificationid", payload.LinkNotificationId.ToString());
            }

        }

        /// <summary>
        /// Sets value in the deeplink from the already created deeplinks
        /// </summary>
        private void SetDependentLinkParameter(string deeplinkKey, DeeplinkPayload payload, DeeplinkResultSet deeplinkResultSet) {
            // FieldName,Deeplinkname,DeeplinkFieldname, Seperated by #; for multiple fields
            // Ex: deeplink2.Add("Other", "DocumentDeeplinkURL,deeplink1,DeeplinkURL");

            if(payload.DeeplinkInfo.ContainsKey(deeplinkKey) && payload.DeeplinkInfo[deeplinkKey].ContainsKey("Other")) {

                string[] fields = payload.DeeplinkInfo[deeplinkKey]["Other"].Split(new string[1] { "#;" }, StringSplitOptions.RemoveEmptyEntries);

                if(fields.Length > 0) {
                    foreach(string fieldvalue in fields) {
                        string[] values = fieldvalue.Split(new char[] { ',' });
                        if(deeplinkResultSet.DeeplinkResults.ContainsKey(values[1])) {
                            if(values[2] == "DeeplinkURL")
                                payload.DeeplinkInfo[deeplinkKey].Add(values[0], deeplinkResultSet.DeeplinkResults[values[1]].DeeplinkURL);
                            else if(values[2] == "DeeplinkJson")
                                payload.DeeplinkInfo[deeplinkKey].Add(values[0], deeplinkResultSet.DeeplinkResults[values[1]].DeeplinkJson);
                        }
                    }
                }
                // Remove the other key as all related values are already added.
                payload.DeeplinkInfo[deeplinkKey].Remove("Other");
            }
        }
    }
}
