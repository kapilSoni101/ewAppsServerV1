// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ewApps.Core.ScheduledJobService;

namespace ewApps.Core.ScheduledJobService.Migrations
{
    [DbContext(typeof(ScheduledJobDBContext))]
    [Migration("20190904100239_initdbschedulerjob33")]
    partial class initdbschedulerjob33
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ewApps.Core.ScheduledJobService.ScheduledJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool>("Processed");

                    b.Property<DateTime>("ScheduledTime");

                    b.Property<string>("SourceCallback")
                        .HasMaxLength(100);

                    b.Property<string>("SourceEventName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SourceEventPayload")
                        .HasMaxLength(4000);

                    b.Property<Guid>("SourceId");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("ScheduledJob","core");
                });

            modelBuilder.Entity("ewApps.Core.ScheduledJobService.ScheduledJobLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompletionReason")
                        .HasMaxLength(4000);

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CompletionTime");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("InProcessQueueReason")
                        .HasMaxLength(4000);

                    b.Property<string>("InProcessQueueStatus")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InProcessQueueTime");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ScheduledJobId");

                    b.Property<DateTime>("ScheduledTime");

                    b.Property<string>("SourceCallbackReason")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("SourceCallbackStatus")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SourceCallbackTime");

                    b.Property<string>("WorkflowStep")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("ScheduledJobLog","core");
                });

            modelBuilder.Entity("ewApps.Core.ScheduledJobService.Scheduler", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("FrequencyType");

                    b.Property<int>("FrequencyValue");

                    b.Property<DateTime?>("LastExecutionTime");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<DateTime>("NextExecutionTime");

                    b.Property<string>("SchedulerName")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Scheduler","core");

                    b.HasData(
                        new { ID = new Guid("72504d45-3128-45f2-aa68-078a3d5eb20f"), Active = true, EndDate = new DateTime(2029, 9, 4, 10, 2, 38, 62, DateTimeKind.Utc), FrequencyType = 1, FrequencyValue = 1, ModifiedOn = new DateTime(2019, 9, 4, 10, 2, 38, 63, DateTimeKind.Utc), NextExecutionTime = new DateTime(2019, 9, 4, 10, 2, 0, 0, DateTimeKind.Utc), SchedulerName = "RecurringPaymentScheduler" }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
